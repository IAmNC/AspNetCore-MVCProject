
@model PaginatedList<ASPNetCoreMVCProject.Models.Student>
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>
@if (User.Identity.IsAuthenticated) { 
<p>
    <a asp-action="Create">Create New Student</a>
</p>
}
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="searchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index"> Back to Full List </a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <!-- set up hyperlinks with query string values using the ViewData properties -->
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["currentFilter"]"> Last Name </a>
            </th>
            <th>
                First Middle Name
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["currentFilter"]">Enrollment Date </a>

            </th>
            <th>
                Email Address
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstMidName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EnrollmentDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EmailAddress)
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a>
                    @if (User.Identity.IsAuthenticated)
                    {
                        @:|
                        <a asp-action="Edit" asp-route-id="@item.ID">Edit</a>
                        @:|
                        <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["currentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["currentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["currentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["currentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>

